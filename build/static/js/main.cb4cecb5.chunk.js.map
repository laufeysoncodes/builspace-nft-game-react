{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","toNumber","checkIfUserHasNFT","characterNFT","on","off","mintCharacterNFTAction","characterId","mintCharacterNFT","mintTxn","wait","warn","length","character","index","src","replace","alt","type","onClick","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackBoss","attackTxn","setTimeout","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","fetchNFTMetadata","provider","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb4cecb5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","const CONTRACT_ADDRESS = \"0x7e24be2697305D92758D95FF6f7430EF48d9D489\";\r\n\r\nconst transformCharacterData = (characterData) => {\r\n  return {\r\n    name: characterData.name,\r\n    imageURI: characterData.imageURI,\r\n    hp: characterData.hp,\r\n    maxHp: characterData.maxHp,\r\n    attackDamage: characterData.attackDamage,\r\n  };\r\n};\r\n\r\nexport { CONTRACT_ADDRESS, transformCharacterData };\r\n","import React from 'react';\r\nimport './LoadingIndicator.css';\r\n\r\nconst LoadingIndicator = () => {\r\n  return (\r\n    <div className=\"lds-ring\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingIndicator;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./SelectCharacter.css\";\r\nimport { ethers } from \"ethers\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\r\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\r\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\r\n\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n    const [characters, setCharacters] = useState([]);\r\n    const [gameContract, setGameContract] = useState(null);\r\n    const [mintingCharacter, setMintingCharacter] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const { ethereum } = window;\r\n\r\n        if (ethereum) {\r\n            const provider = new ethers.providers.Web3Provider(ethereum);\r\n            const signer = provider.getSigner();\r\n            const gameContract = new ethers.Contract(\r\n                CONTRACT_ADDRESS,\r\n                myEpicGame.abi,\r\n                signer\r\n            );\r\n\r\n            /*\r\n             * This is the big difference. Set our gameContract in state.\r\n             */\r\n            setGameContract(gameContract);\r\n        } else {\r\n            console.log(\"Ethereum object not found\");\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const getCharacters = async () => {\r\n            try {\r\n                console.log(\"Getting contract characters to mint\");\r\n\r\n                const charactersTxn =\r\n                    await gameContract.getAllDefaultCharacters();\r\n                console.log(\"charactersTxn:\", charactersTxn);\r\n\r\n                const characters = charactersTxn.map((characterData) =>\r\n                    transformCharacterData(characterData)\r\n                );\r\n\r\n                setCharacters(characters);\r\n            } catch (error) {\r\n                console.error(\r\n                    \"Something went wrong fetching characters:\",\r\n                    error\r\n                );\r\n            }\r\n        };\r\n\r\n        const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n            console.log(\r\n                `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n            );\r\n\r\n            if (gameContract) {\r\n                const characterNFT = await gameContract.checkIfUserHasNFT();\r\n                console.log(\"CharacterNFT: \", characterNFT);\r\n                setCharacterNFT(transformCharacterData(characterNFT));\r\n            }\r\n        };\r\n\r\n        if (gameContract) {\r\n            getCharacters();\r\n\r\n            gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\r\n        }\r\n\r\n        return () => {\r\n            if (gameContract) {\r\n                gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\r\n            }\r\n        };\r\n    }, [gameContract, setCharacterNFT]);\r\n\r\n    const mintCharacterNFTAction = async (characterId) => {\r\n        try {\r\n            if (gameContract) {\r\n                setMintingCharacter(true);\r\n                console.log(\"Minting character in progress...\");\r\n                const mintTxn = await gameContract.mintCharacterNFT(\r\n                    characterId\r\n                );\r\n                await mintTxn.wait();\r\n                console.log(\"mintTxn:\", mintTxn);\r\n                setMintingCharacter(false);\r\n            }\r\n        } catch (error) {\r\n            console.warn(\"MintCharacterAction Error:\", error);\r\n        }\r\n        setMintingCharacter(false);\r\n    };\r\n\r\n    const renderCharacters = () =>\r\n        characters.map((character, index) => (\r\n            <div className=\"character-item\" key={character.name}>\r\n                <div className=\"name-container\">\r\n                    <p>{character.name}</p>\r\n                </div>\r\n                <img\r\n                    src={`https://ipfs.io/ipfs/${character.imageURI.replace(\r\n                        \"ipfs://\",\r\n                        \"\"\r\n                    )}`}\r\n                    alt={character.name}\r\n                />\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"character-mint-button\"\r\n                    onClick={() => mintCharacterNFTAction(index)}\r\n                >{`Mint ${character.name}`}</button>\r\n            </div>\r\n        ));\r\n\r\n    return (\r\n        <div className=\"select-character-container\">\r\n            <h2>Mint Your Hero. Choose wisely.</h2>\r\n            {characters.length > 0 && (\r\n                <div className=\"character-grid\">{renderCharacters()}</div>\r\n            )}\r\n\r\n            {mintingCharacter && (\r\n                <div className=\"loading\">\r\n                    <div className=\"indicator\">\r\n                        <LoadingIndicator />\r\n                        <p>Minting In Progress...</p>\r\n                    </div>\r\n                    <img\r\n                        src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\r\n                        alt=\"Minting loading indicator\"\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectCharacter;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\r\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\r\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\r\nimport \"./Arena.css\";\r\n\r\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\r\n    const [gameContract, setGameContract] = useState(null);\r\n    const [boss, setBoss] = useState(null);\r\n    const [attackState, setAttackState] = useState(\"\");\r\n    const [showToast, setShowToast] = useState(false);\r\n\r\n    const runAttackAction = async () => {\r\n        try {\r\n            if (gameContract) {\r\n                setAttackState(\"attacking\");\r\n                console.log(\"Attacking boss...\");\r\n                const attackTxn = await gameContract.attackBoss();\r\n                await attackTxn.wait();\r\n\r\n                console.log(\"AttackTxn:\", attackTxn);\r\n                setAttackState(\"hit\");\r\n                setShowToast(true);\r\n                setTimeout(() => {\r\n                    setShowToast(false);\r\n                }, 5000);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error attacking boss:\", err);\r\n            setAttackState(\"\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const { ethereum } = window;\r\n\r\n        if (ethereum) {\r\n            const provider = new ethers.providers.Web3Provider(ethereum);\r\n            const signer = provider.getSigner();\r\n            const gameContract = new ethers.Contract(\r\n                CONTRACT_ADDRESS,\r\n                myEpicGame.abi,\r\n                signer\r\n            );\r\n\r\n            setGameContract(gameContract);\r\n        } else {\r\n            console.log(\"Ethereum object not found\");\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchBoss = async () => {\r\n            const bossTxn = await gameContract.getBigBoss();\r\n            console.log(\"Boss:\", bossTxn);\r\n            setBoss(transformCharacterData(bossTxn));\r\n        };\r\n\r\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\r\n            const bossHp = newBossHp.toNumber();\r\n            const playerHp = newPlayerHp.toNumber();\r\n\r\n            console.log(\r\n                `AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`\r\n            );\r\n\r\n            /*\r\n             * Update both player and boss Hp\r\n             */\r\n            setBoss((prevState) => {\r\n                return { ...prevState, hp: bossHp };\r\n            });\r\n\r\n            setCharacterNFT((prevState) => {\r\n                return { ...prevState, hp: playerHp };\r\n            });\r\n        };\r\n\r\n        if (gameContract) {\r\n            fetchBoss();\r\n            gameContract.on(\"AttackComplete\", onAttackComplete);\r\n        }\r\n\r\n        return () => {\r\n            if (gameContract) {\r\n                gameContract.off(\"AttackComplete\", onAttackComplete);\r\n            }\r\n        };\r\n    }, [gameContract]);\r\n\r\n    return (\r\n        <div className=\"arena-container\">\r\n            {boss && characterNFT && (\r\n                <div id=\"toast\" className={showToast ? \"show\" : \"\"}>\r\n                    <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Boss */}\r\n            {boss && (\r\n                <div className=\"boss-container\">\r\n                    <div className={`boss-content  ${attackState}`}>\r\n                        <h2>🔥 {boss.name} 🔥</h2>\r\n                        <div className=\"image-content\">\r\n                            <img\r\n                                src={`https://ipfs.io/ipfs/${boss.imageURI.replace(\r\n                                    \"ipfs://\",\r\n                                    \"\"\r\n                                )}`}\r\n                                alt={`Boss ${boss.name}`}\r\n                            />\r\n                            <div className=\"health-bar\">\r\n                                <progress value={boss.hp} max={boss.maxHp} />\r\n                                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"attack-container\">\r\n                        <button\r\n                            className=\"cta-button\"\r\n                            onClick={runAttackAction}\r\n                        >\r\n                            {`💥 Attack ${boss.name}`}\r\n                        </button>\r\n                    </div>\r\n                    {attackState === \"attacking\" && (\r\n                        <div className=\"loading-indicator\">\r\n                            <LoadingIndicator />\r\n                            <p>Attacking ⚔️</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            {/* Character NFT */}\r\n            {characterNFT && (\r\n                <div className=\"players-container\">\r\n                    <div className=\"player-container\">\r\n                        <h2>Your Character</h2>\r\n                        <div className=\"player\">\r\n                            <div className=\"image-content\">\r\n                                <h2>{characterNFT.name}</h2>\r\n                                <img\r\n                                    src={`https://ipfs.io/ipfs/${characterNFT.imageURI.replace(\r\n                                        \"ipfs://\",\r\n                                        \"\"\r\n                                    )}`}\r\n                                    alt={`Character ${characterNFT.name}`}\r\n                                />\r\n                                <div className=\"health-bar\">\r\n                                    <progress\r\n                                        value={characterNFT.hp}\r\n                                        max={characterNFT.maxHp}\r\n                                    />\r\n                                    <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"stats\">\r\n                                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"active-players\">\r\n                <h2>Active Players</h2>\r\n                <div className=\"players-list\">{renderActivePlayersList()}</div>\r\n              </div>  */}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Arena;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport SelectCharacter from \"./Components/SelectCharacter\";\r\nimport { ethers } from \"ethers\";\r\nimport myEpicGame from \"./utils/MyEpicGame.json\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"./constants.js\";\r\nimport Arena from \"./Components/Arena\";\r\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\r\nimport \"./App.css\";\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = \"_buildspace\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n    const [currentAccount, setCurrentAccount] = useState(null);\r\n    const [characterNFT, setCharacterNFT] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const checkIfWalletIsConnected = async () => {\r\n        try {\r\n            const { ethereum } = window;\r\n\r\n            if (!ethereum) {\r\n                console.log(\"Make sure you have Metamask!\");\r\n                return;\r\n            } else {\r\n                console.log(\"We have the ethereum object\", ethereum);\r\n            }\r\n\r\n            const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n            if (accounts.length !== 0) {\r\n                const account = accounts[0];\r\n                console.log(\"Found an authorized account:\", account);\r\n                setCurrentAccount(account);\r\n            } else {\r\n                console.log(\"No authorized account found\");\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const renderContent = () => {\r\n        if (isLoading) {\r\n            return <LoadingIndicator />;\r\n        }\r\n\r\n        if (!currentAccount) {\r\n            return (\r\n                <div className=\"connect-wallet-container\">\r\n                    <img\r\n                        src=\"https://ipfs.io/ipfs/Qmf1kgdRj9J7NvwTDki7CQ3vEcPcRxgBEKLpp5S1vzZXkB\"\r\n                        alt=\"Cool Frog\"\r\n                    />\r\n                    <button\r\n                        className=\"cta-button connect-wallet-button\"\r\n                        onClick={connectWalletAction}\r\n                    >\r\n                        Connect Wallet To Get Started\r\n                    </button>\r\n                </div>\r\n            );\r\n        } else if (currentAccount && !characterNFT) {\r\n            return (\r\n                <SelectCharacter\r\n                    setCharacterNFT={setCharacterNFT}\r\n                ></SelectCharacter>\r\n            );\r\n        } else if (currentAccount && characterNFT) {\r\n            return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT}/>;\r\n        }\r\n    };\r\n\r\n    const connectWalletAction = async () => {\r\n        try {\r\n            const { ethereum } = window;\r\n\r\n            if (!ethereum) {\r\n                alert(\"Get Metamask!\");\r\n                return;\r\n            }\r\n\r\n            const accounts = await ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n\r\n            console.log(\"Connected\", accounts[0]);\r\n            setCurrentAccount(accounts[0]);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        checkIfWalletIsConnected();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchNFTMetadata = async () => {\r\n            console.log(\r\n                \"Checking for Character NFT on address:\",\r\n                currentAccount\r\n            );\r\n\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const gameContract = new ethers.Contract(\r\n                CONTRACT_ADDRESS,\r\n                myEpicGame.abi,\r\n                signer\r\n            );\r\n\r\n            const characterNFT = await gameContract.checkIfUserHasNFT();\r\n            if (characterNFT.name) {\r\n                console.log(\"User has Character NFT\");\r\n                setCharacterNFT(transformCharacterData(characterNFT));\r\n            }\r\n\r\n            setIsLoading(false);\r\n        };\r\n\r\n        if (currentAccount) {\r\n            console.log(\"Current Account:\", currentAccount);\r\n            fetchNFTMetadata();\r\n        }\r\n    }, [currentAccount]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"container\">\r\n                <div className=\"header-container\">\r\n                    <p className=\"header gradient-text\">🐸 Froggerz Arena 🐸</p>\r\n                    <p className=\"sub-text\">!vibe to protect the world!</p>\r\n                    {renderContent()}\r\n                </div>\r\n                <div className=\"footer-container\">\r\n                    <img\r\n                        alt=\"Twitter Logo\"\r\n                        className=\"twitter-logo\"\r\n                        src={twitterLogo}\r\n                    />\r\n                    <a\r\n                        className=\"footer-text\"\r\n                        href={TWITTER_LINK}\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >{`built with @${TWITTER_HANDLE}`}</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}